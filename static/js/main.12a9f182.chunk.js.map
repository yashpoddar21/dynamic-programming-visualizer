{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/wildcard.js","algorithms/subsetsum.js","PathfindingVisualizer/PathfindingVisualizer.jsx","Form.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","status","val","id","className","extraClassName","Component","dijkstra","s","console","log","visitedNodesInOrder","dp","i","length","Array","fill","j","push","createNode","left","right","status_in","Palindrome","state","grid","getInitialGrid","setState","setTimeout","node","document","getElementById","nodesInShortestPathOrder","isPalindrome","isWildCard","isSubsetSum","stringPalindrome","input2","input3","input4","input5","topic","animateDijkstra","p","text","pattern","T","charAt","isMatch","values","toString","split","map","t","parseInt","n","nums","sum","subsetSum","onClick","visualizeDijkstra","reset","rowIdx","nodeIdx","isFinish","isStart","currentRow","distance","Infinity","isVisited","previousNode","Form","handleInput1Change","event","input1","target","value","handleInput2Change","handleInput3Change","handleInput4Change","handleInput5Change","handleTopicChange","handleSubmit","preventDefault","data","haveSubmitted","alert","class","onSubmit","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12a9f182.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      row,\n      status,\n      val, \n    } = this.props;\n    var extraClassName;\n    if(status === -1){\n      const extraClassName = ''\n    }\n    else if(status === 1){\n      const extraClassName = 'node-true'\n    }\n    else if(status === 0){\n      const extraClassName = 'node-false'\n    }\n    \n    return (\n      <div id={`node-${row}-${col}`} className={`node ${extraClassName}`}>{val}</div>\n    );\n  }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(s) {\n  console.log(s)\n  const visitedNodesInOrder = [];\n  var dp = []; //dp[i][j] -> is s[i:j] a palindromic string\n    for(var i = 0; i < s.length;  i++) {\n        dp[i] = Array(s.length).fill(false);\n        for(var j = 0; j < s.length; j++){\n          visitedNodesInOrder.push(createNode(i + 1, j + 1, 0))\n        }\n        dp[i][i] = true;\n        visitedNodesInOrder.push(createNode(i + 1, i + 1, 1))\n    }\n    var left = 0;\n    var right = 0;\n    for(var i = s.length - 1; i >= 0; i--) {\n        for(var j = i + 1; j < s.length; j++) {\n            if(s[i] === s[j]) {\n                if(j - i === 1 || dp[i + 1][j - 1]) {\n                    dp[i][j] = true;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1))\n                    if(j - i > right - left) {\n                        right = j;\n                        left = i;\n                    }\n                }\n            }\n        }\n    }\n    console.log(\"Visited nodes from Dijsktra\")\n    console.log(visitedNodesInOrder)\n    return visitedNodesInOrder;\n}\n\nconst createNode = (row, col, status_in) => {\n  return {\n    row,\n    col,\n    status: status_in, \n\n  };\n};\n  \n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n\n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }\n  ","export function isMatch(s, p) {\n    console.log(s)\n    const visitedNodesInOrder = [];\n    var text=s, pattern=p;\n    console.log(\"text is\")\n    console.log(text)\n    console.log(\"pattern is\")\n    console.log(pattern)\n    var T = [];\n    for (var i = 0; i <= text.length; i++) {\n        T[i] = [];\n        for (var j = 0; j <= pattern.length; j++) {\n            if (i === 0 && j === 0) {\n                T[i][j] = true;\n                visitedNodesInOrder.push(createNode(i + 1, j + 1, 1))\n                continue;\n            }\n            if (j === 0) {\n                T[i][j] = false;\n                visitedNodesInOrder.push(createNode(i + 1, j + 1, 0))\n                continue;\n            }\n            if (i === 0) { \n                if (pattern.charAt(j - 1) === '*' && j > 0) {\n                    T[i][j] = T[i][j - 1];\n                    if(T[i][j] === true){\n                        visitedNodesInOrder.push(createNode(i + 1, j + 1, 1))\n                    }\n                    else{\n                        visitedNodesInOrder.push(createNode(i + 1, j + 1, 0))\n                    }\n                }\n                else\n                    T[i][j] = false;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 0))\n                continue;\n            }\n            if (text.charAt(i - 1) === pattern.charAt(j - 1) || pattern.charAt(j - 1) === '?') {\n                T[i][j] = T[i - 1][j - 1];\n                if(T[i][j] === true){\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1))\n                }\n                else{\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 0))\n                }\n\n            }\n            else if (pattern[j - 1] === '*') {\n                if (T[i][j - 1] === true || T[i-1][j]=== true){\n                    T[i][j] = true;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1));\n                }   \n                else{\n                    T[i][j] = false;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 0));\n                }\n            }            \n            else{\n                T[i][j] = false;\n                visitedNodesInOrder.push(createNode(i + 1, j + 1, 0));\n            }\n                \n        }\n    }\n    return visitedNodesInOrder;\n  }\n\n  const createNode = (row, col, status_in) => {\n    return {\n      row,\n      col,\n      status: status_in, \n  \n    };\n  };","export function subsetSum(nums, sum) {\n    const dp = [];\n    const visitedNodesInOrder = [];\n    sum = parseInt(sum);\n    for(let i = 0; i<= sum; i++){\n        dp[i] = []\n        dp[0][i] = false; \n        visitedNodesInOrder.push(createNode(0 + 1, i + 1, 0))\n    }\n    for (let i = 1; i <= nums.length; i++) {\n        for (let j = 0; j <= sum; j++) {\n            if(j - nums[i - 1] >= 0){\n                if(dp[i-1][j] === true){\n                    dp[i][j] = true;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1))\n                }\n                else if(nums[i - 1] === j){\n                    dp[i][j] = true;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1))\n                }\n                else if(dp[i - 1][j - nums[i-1]] === true){\n                    dp[i][j] = true;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1))\n                }\n                else{\n                    dp[i][j] = false; \n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 0))\n                }\n            }\n            else{\n                if(dp[i-1][j] === true){\n                    dp[i][j] = true;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1)); \n                }\n                else if(nums[i - 1] === j){\n                    dp[i][j] = true;\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 1)); \n                }\n                else{\n                    visitedNodesInOrder.push(createNode(i + 1, j + 1, 0)); \n                }\n            }\n        }\n    }\n    return visitedNodesInOrder;\n    \n\n}\n\n  \n  const createNode = (row, col, status_in) => {\n    return {\n      row,\n      col,\n      status: status_in, \n  \n    };\n  };","import React, {Component, useRef} from 'react';\n\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\nimport {isMatch} from '../algorithms/wildcard';\nimport {subsetSum} from '../algorithms/subsetsum';\n\nimport './PathfindingVisualizer.css';\nimport userEvent from '@testing-library/user-event';\n\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst FINISH_NODE_ROW = 4;\nconst FINISH_NODE_COL = 4;\n\n\nexport default class Palindrome extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        grid: [], \n      };\n    }\n\ncomponentDidMount() {\n    console.log('palindrome')\n    console.log(this.props)\n    console.log(\"Input string is\")\n    const grid = getInitialGrid();\n    this.setState({grid});\n}\n\nanimateDijkstra(visitedNodesInOrder) {\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        console.log(\"from animate\")\n        console.log(node)\n        if(node.status === 0){\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-false';\n        }\n        else if(node.status === 1){\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-true';\n        }\n      }, 500 * i);\n    }\n  }\n\nanimateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\nvisualizeDijkstra() {\n  var {isPalindrome} = false; \n  var {isWildCard} = false; \n  var {isSubsetSum} = false;\n  const {stringPalindrome, input2, input3, input4, input5, topic} = this.props; \n  console.log(\"input 2 is\");\n  console.log({input2});\n  console.log(\"input 3 is\");\n  console.log({input3});\n  console.log(\"topic is\");\n  console.log({topic});\n\n\n  if(stringPalindrome !== '' && topic === 'Longest Palindromic Substring'){\n      isPalindrome = true; \n  }\n  if(input2 !== '' && input3 != '' && topic === 'Wild Card Matching'){\n    isWildCard = true; \n  }\n  if(input4 !== '' && input5 !== '' && topic === 'Subset Sum'){\n    isSubsetSum = true; \n  }\n  console.log(\"input 4 is \")\n  console.log(input4)\n  console.log(\"input 5 is \")\n  console.log(input5)\n  console.log(\"isSubsetSum\")\n  console.log(isSubsetSum)\n  if(isPalindrome){\n    const visitedNodesInOrder = dijkstra(stringPalindrome);\n    console.log(\"visited nodes are\")\n    console.log(visitedNodesInOrder)\n    this.animateDijkstra(visitedNodesInOrder);\n  }\n  else if(isWildCard){\n    const visitedNodesInOrder = isMatch(input2, input3);\n    console.log(\"visitedNodesInOrder\")\n    console.log(visitedNodesInOrder)\n    this.animateDijkstra(visitedNodesInOrder);\n  }\n  else if(isSubsetSum){\n    console.log(\"Reached isSubsetSum statement\")\n    const values = (input4).toString(10).split(\"\").map(function(t){return parseInt(t)})\n    const n = values.length; \n    console.log(\"Array is\")\n    console.log(values)\n    console.log(\"n is\")\n    console.log(n)\n    console.log(\"target is\")\n    console.log(input5)\n    const visitedNodesInOrder = subsetSum(values, input5); \n    console.log(\"answer is\")\n    console.log(visitedNodesInOrder)\n    this.animateDijkstra(visitedNodesInOrder);\n  }\n  else{\n    console.log(\"Reached else statement\")\n    console.log(\"this is props\")\n    console.log(this.props)\n    const {grid} = this.state;\n    const visitedNodesInOrder = dijkstra(stringPalindrome);\n    console.log(visitedNodesInOrder)\n    const x = 123456789\n    const n = (x).toString(10).split(\"\").map(function(t){return parseInt(t)})\n    console.log(\"Array is\")\n    console.log(n)\n    this.animateDijkstra(visitedNodesInOrder);\n\n  }\n  }\nreset(){\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 27; col++) {\n      document.getElementById(`node-${row}-${col}`).className =\n          'node node';\n    }\n  }\n}\n\nrender(){\n  console.log(\"Reached reset grid\")\n    const {grid} = this.state; \n    \n    \n    return(\n        <>\n          <button onClick={() => this.visualizeDijkstra()} className = \"visualize-button\">\n          Visualize\n        </button>  \n        <button onClick={() => this.reset()} className = \"reset-button\">\n          Reset\n        </button> \n        <p> Button</p>\n        <h3>We are building a Bottom Up DP Table</h3>\n        <div className = \"grid\">\n            {grid.map((row, rowIdx) => {\n                return (\n                    <div key = {rowIdx}>\n                        {row.map((node, nodeIdx) =>{\n                            const {row, col, isFinish, isStart, val, status} = node;\n                            if(rowIdx === 0 && nodeIdx === 0){\n                              return(\n                                <Node\n                                    key={nodeIdx}\n                                    col={col}\n                                    isFinish={isFinish}\n                                    isStart={isStart}\n                                    status = {status}\n                                    val = {val}\n                                    row={row}></Node>\n                                \n                            ); \n                            }\n                            else if(rowIdx === 0 && nodeIdx !== 0){\n                              return(\n                                <Node\n                                    key={nodeIdx}\n                                    col={col}\n                                    isFinish={isFinish}\n                                    isStart={isStart}\n                                    status = {status}\n                                    val = {nodeIdx - 1}\n                                    row={row}></Node>\n                            ); \n                            }\n                            else if(rowIdx !== 0 && nodeIdx === 0){\n                              return(\n                                <Node\n                                    key={nodeIdx}\n                                    col={col}\n                                    isFinish={isFinish}\n                                    isStart={isStart}\n                                    status = {status}\n                                    val = {rowIdx - 1}\n                                    row={row}></Node>\n                            ); }\n                            else{\n                              return(\n                                <Node\n                                    key={nodeIdx}\n                                    col={col}\n                                    isFinish={isFinish}\n                                    isStart={isStart}\n                                    status = {status}\n                                    val = {val}\n                                    row={row}></Node>\n                            ); \n                            } \n                        })}\n                    </div>\n                ); \n                    })}\n                    </div>\n                    </>\n    );\n                }\n            }\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 9; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 27; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n    return {\n      col,\n      row,\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n      status: -1, \n      distance: Infinity,\n      val: '', \n      isVisited: false,\n      previousNode: null,\n    };\n  };\n\n","import React, { Component, useState, useCallback } from 'react'\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\nimport './Form.css';\n\nclass Form extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tinput1: '',\n\t\t\tinput2: '',\n\t\t\tinput3: '', \n\t\t\tinput4: '', \n\t\t\tinput5: '',\n\t\t\ttopic: 'Longest Palindromic Substring',\n\t\t\thaveSubmitted: false\n\t\t}\n\t}\n\n\thandleInput1Change = event => {\n\t\tthis.setState({\n\t\t\tinput1: event.target.value\n\t\t})\n\t}\n\n\thandleInput2Change = event => {\n\t\tthis.setState({\n\t\t\tinput2: event.target.value\n\t\t})\n\t}\n\thandleInput3Change = event => {\n\t\tthis.setState({\n\t\t\tinput3: event.target.value\n\t\t})\n\t}\n\thandleInput4Change = event => {\n\t\tthis.setState({\n\t\t\tinput4: event.target.value\n\t\t})\n\t}\n\thandleInput5Change = event => {\n\t\tthis.setState({\n\t\t\tinput5: event.target.value\n\t\t})\n\t}\n\n\thandleTopicChange = event => {\n\t\tconsole.log(\"Reached topic\")\n\t\tthis.setState({\n\t\t\ttopic: event.target.value\n\t\t})\n\t}\n\n\n\thandleSubmit = event => {\n\t\tconsole.log(\"Reached Here\")\n        event.preventDefault()\n        const data = this.state\n        console.log(\"Reached here\")\n        console.log(data)\n\t\tthis.setState({haveSubmitted: true})\n\t\tconsole.log(\"Memo status\")\n\t\tconsole.log(this.state.haveSubmitted)\n\t\talert(\"You have submitted your data, please press visualize to visualize the DP Table\")\n\t}\n\n\n\trender() {\n\t\tconst { input1, input2, input3, input4, input5, topic, haveSubmitted } = this.state;\n\t\t\n\t\tif(haveSubmitted){\n\t\t\treturn(\n\t\t\t\t<>\n\t\t\t\t<div class = \"box\"></div>\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<div className = \"input1\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={input1}\n\t\t\t\t\t\tplaceholder = \"String for Longest Palindromic Substring\"\n\t\t\t\t\t\tonChange={this.handleInput1Change} className = \"input1\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype = \"text\"\n\t\t\t\t\t\tvalue={input2}\n\t\t\t\t\t\tonChange={this.handleInput2Change} className = \"input2\"\n\t\t\t\t\t\tplaceholder = \"Text for Wildcard Matching\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input3\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype = \"text\"\n\t\t\t\t\t\tvalue={input3}\n\t\t\t\t\t\tonChange={this.handleInput3Change} className = \"input3\"\n\t\t\t\t\t\tplaceholder = \"Pattern for Wildcard Matching\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input4\">\n\t\t\t\t\t<input\n\t\t\t\t\t \ttype = \"text\"\n\t\t\t\t\t\tvalue={input4}\n\t\t\t\t\t\tonChange={this.handleInput4Change} className = \"input4\"\n\t\t\t\t\t\tplaceholder = \"Array without commas, spaces, and brackets\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input5\">\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype = \"text\"\n\t\t\t\t\t\tvalue={input5}\n\t\t\t\t\t\tonChange={this.handleInput5Change} className = \"input5\"\n\t\t\t\t\t\tplaceholder = \"Target Sum\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"menu-bar\">\n\t\t\t\t\t<select value={topic} onChange={this.handleTopicChange} className = \"option-bar\">\t\n\t\t\t\t\t\t<option value=\"Longest Palindromic Substring\">Longest Palindromic Substring</option>\n\t\t\t\t\t\t<option value=\"Subset Sum\">Subset Sum</option>\n\t\t\t\t\t\t<option value=\"Wild Card Matching\">Wild Card Matching</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<button type=\"submit\" className = \"submit-button\">Submit</button>\n\t\t\t</form>\n\t\t\t<PathfindingVisualizer stringPalindrome = {input1}\n\t\t\t\t\t\t\tinput2 = {input2} input3 = {input3} input4 = {input4} \n\t\t\t\t\t\t\t\t\t\tinput5 = {input5} topic = {topic}></PathfindingVisualizer>\n\t\t\t</>\n\t\t\t)\n\t\t}\n\t\telse{\n\t\t\treturn(\n\t\t\t\t<>\n\t\t\t\t<div class = \"box\"></div>\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<div className = \"input1\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={input1}\n\t\t\t\t\t\tplaceholder = \"String for Longest Palindromic Substring\"\n\t\t\t\t\t\tonChange={this.handleInput1Change} className = \"input1\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype = \"text\"\n\t\t\t\t\t\tvalue={input2}\n\t\t\t\t\t\tonChange={this.handleInput2Change} className = \"input2\"\n\t\t\t\t\t\tplaceholder = \"Text for Wildcard Matching\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input3\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype = \"text\"\n\t\t\t\t\t\tvalue={input3}\n\t\t\t\t\t\tonChange={this.handleInput3Change} className = \"input3\"\n\t\t\t\t\t\tplaceholder = \"Pattern for Wildcard Matching\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input4\">\n\t\t\t\t\t<input\n\t\t\t\t\t \ttype = \"text\"\n\t\t\t\t\t\tvalue={input4}\n\t\t\t\t\t\tonChange={this.handleInput4Change} className = \"input4\"\n\t\t\t\t\t\tplaceholder = \"Array without commas, spaces, and brackets\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"input5\">\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype = \"text\"\n\t\t\t\t\t\tvalue={input5}\n\t\t\t\t\t\tonChange={this.handleInput5Change} className = \"input5\"\n\t\t\t\t\t\tplaceholder = \"Target Sum\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className = \"menu-bar\">\n\t\t\t\t\t<select value={topic} onChange={this.handleTopicChange} className = \"option-bar\">\t\n\t\t\t\t\t\t<option value=\"Longest Palindromic Substring\">Longest Palindromic Substring</option>\n\t\t\t\t\t\t<option value=\"Subset Sum\">Subset Sum</option>\n\t\t\t\t\t\t<option value=\"Wild Card Matching\">Wild Card Matching</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<button type=\"submit\" className = \"submit-button\">Submit</button>\n\t\t\t</form>\n\t\t\t</>\n\t\t\t)\n\t\t}\n\t}\n}\n\nexport default Form","import { render } from '@testing-library/react';\nimport React, { useState, useRef, useEffect, Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\n\nimport Form from './Form'\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Form />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}